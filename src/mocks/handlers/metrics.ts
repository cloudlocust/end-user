import { rest } from 'msw'
import { getMetricType, IMetrics } from 'src/modules/Metrics/Metrics'
import { METRICS_API } from 'src/modules/Metrics/metricsHook'
import { SnakeCasedPropertiesDeep } from 'type-fest'

const FAKE_DAY_INTERVAL = '1min'
const FAKE_WEEK_INTERVAL = '1d'
const FAKE_MONTH_INTERVAL = '1d'
const FAKE_YEAR_INTERVAL = '1m'

/**
 * Data of one day with 1min interval.
 */
const FAKE_DAY_DATA = [
    [55, 1640995200],
    [55, 1640995260],
    [55, 1640995320],
    [55, 1640995380],
    [55, 1640995440],
    [55, 1640995500],
    [55, 1640995560],
    [55, 1640995620],
    [55, 1640995680],
    [55, 1640995740],
    [55, 1640995800],
    [55, 1640995860],
    [55, 1640995920],
    [55, 1640995980],
    [55, 1640996040],
    [55, 1640996100],
    [55, 1640996160],
    [55, 1640996220],
    [55, 1640996280],
    [55, 1640996340],
    [55, 1640996400],
    [55, 1640996460],
    [55, 1640996520],
    [55, 1640996580],
    [55, 1640996640],
    [55, 1640996700],
    [55, 1640996760],
    [55, 1640996820],
    [55, 1640996880],
    [55, 1640996940],
    [55, 1640997000],
    [55, 1640997060],
    [55, 1640997120],
    [55, 1640997180],
    [55, 1640997240],
    [55, 1640997300],
    [55, 1640997360],
    [55, 1640997420],
    [55, 1640997480],
    [55, 1640997540],
    [55, 1640997600],
    [55, 1640997660],
    [55, 1640997720],
    [55, 1640997780],
    [55, 1640997840],
    [55, 1640997900],
    [55, 1640997960],
    [55, 1640998020],
    [55, 1640998080],
    [55, 1640998140],
    [55, 1640998200],
    [55, 1640998260],
    [55, 1640998320],
    [55, 1640998380],
    [55, 1640998440],
    [55, 1640998500],
    [55, 1640998560],
    [55, 1640998620],
    [55, 1640998680],
    [55, 1640998740],
    [55, 1640998800],
    [55, 1640998860],
    [55, 1640998920],
    [55, 1640998980],
    [55, 1640999040],
    [55, 1640999100],
    [55, 1640999160],
    [55, 1640999220],
    [55, 1640999280],
    [55, 1640999340],
    [55, 1640999400],
    [55, 1640999460],
    [55, 1640999520],
    [55, 1640999580],
    [55, 1640999640],
    [55, 1640999700],
    [55, 1640999760],
    [55, 1640999820],
    [55, 1640999880],
    [55, 1640999940],
    [55, 1641000000],
    [55, 1641000060],
    [55, 1641000120],
    [55, 1641000180],
    [55, 1641000240],
    [55, 1641000300],
    [55, 1641000360],
    [55, 1641000420],
    [55, 1641000480],
    [55, 1641000540],
    [55, 1641000600],
    [55, 1641000660],
    [55, 1641000720],
    [55, 1641000780],
    [55, 1641000840],
    [55, 1641000900],
    [55, 1641000960],
    [55, 1641001020],
    [55, 1641001080],
    [55, 1641001140],
    [55, 1641001200],
    [55, 1641001260],
    [55, 1641001320],
    [55, 1641001380],
    [55, 1641001440],
    [55, 1641001500],
    [55, 1641001560],
    [55, 1641001620],
    [55, 1641001680],
    [55, 1641001740],
    [55, 1641001800],
    [55, 1641001860],
    [55, 1641001920],
    [55, 1641001980],
    [55, 1641002040],
    [55, 1641002100],
    [55, 1641002160],
    [55, 1641002220],
    [55, 1641002280],
    [55, 1641002340],
    [55, 1641002400],
    [55, 1641002460],
    [55, 1641002520],
    [55, 1641002580],
    [55, 1641002640],
    [55, 1641002700],
    [55, 1641002760],
    [55, 1641002820],
    [55, 1641002880],
    [55, 1641002940],
    [55, 1641003000],
    [55, 1641003060],
    [55, 1641003120],
    [55, 1641003180],
    [55, 1641003240],
    [55, 1641003300],
    [55, 1641003360],
    [55, 1641003420],
    [55, 1641003480],
    [55, 1641003540],
    [55, 1641003600],
    [55, 1641003660],
    [55, 1641003720],
    [55, 1641003780],
    [55, 1641003840],
    [55, 1641003900],
    [55, 1641003960],
    [55, 1641004020],
    [55, 1641004080],
    [55, 1641004140],
    [55, 1641004200],
    [55, 1641004260],
    [55, 1641004320],
    [55, 1641004380],
    [55, 1641004440],
    [55, 1641004500],
    [55, 1641004560],
    [55, 1641004620],
    [55, 1641004680],
    [55, 1641004740],
    [55, 1641004800],
    [55, 1641004860],
    [55, 1641004920],
    [55, 1641004980],
    [55, 1641005040],
    [55, 1641005100],
    [55, 1641005160],
    [55, 1641005220],
    [55, 1641005280],
    [55, 1641005340],
    [55, 1641005400],
    [55, 1641005460],
    [55, 1641005520],
    [55, 1641005580],
    [55, 1641005640],
    [55, 1641005700],
    [55, 1641005760],
    [55, 1641005820],
    [55, 1641005880],
    [55, 1641005940],
    [55, 1641006000],
    [55, 1641006060],
    [55, 1641006120],
    [55, 1641006180],
    [55, 1641006240],
    [55, 1641006300],
    [55, 1641006360],
    [55, 1641006420],
    [55, 1641006480],
    [55, 1641006540],
    [55, 1641006600],
    [55, 1641006660],
    [55, 1641006720],
    [55, 1641006780],
    [55, 1641006840],
    [55, 1641006900],
    [55, 1641006960],
    [55, 1641007020],
    [55, 1641007080],
    [55, 1641007140],
    [55, 1641007200],
    [55, 1641007260],
    [55, 1641007320],
    [55, 1641007380],
    [55, 1641007440],
    [55, 1641007500],
    [55, 1641007560],
    [55, 1641007620],
    [55, 1641007680],
    [55, 1641007740],
    [55, 1641007800],
    [55, 1641007860],
    [55, 1641007920],
    [55, 1641007980],
    [55, 1641008040],
    [55, 1641008100],
    [55, 1641008160],
    [55, 1641008220],
    [55, 1641008280],
    [55, 1641008340],
    [55, 1641008400],
    [55, 1641008460],
    [55, 1641008520],
    [55, 1641008580],
    [55, 1641008640],
    [55, 1641008700],
    [55, 1641008760],
    [55, 1641008820],
    [55, 1641008880],
    [55, 1641008940],
    [55, 1641009000],
    [55, 1641009060],
    [55, 1641009120],
    [55, 1641009180],
    [55, 1641009240],
    [55, 1641009300],
    [55, 1641009360],
    [55, 1641009420],
    [55, 1641009480],
    [55, 1641009540],
    [55, 1641009600],
    [55, 1641009660],
    [55, 1641009720],
    [55, 1641009780],
    [55, 1641009840],
    [55, 1641009900],
    [55, 1641009960],
    [55, 1641010020],
    [55, 1641010080],
    [55, 1641010140],
    [55, 1641010200],
    [55, 1641010260],
    [55, 1641010320],
    [55, 1641010380],
    [55, 1641010440],
    [55, 1641010500],
    [55, 1641010560],
    [55, 1641010620],
    [55, 1641010680],
    [55, 1641010740],
    [55, 1641010800],
    [55, 1641010860],
    [55, 1641010920],
    [55, 1641010980],
    [55, 1641011040],
    [55, 1641011100],
    [55, 1641011160],
    [55, 1641011220],
    [55, 1641011280],
    [55, 1641011340],
    [55, 1641011400],
    [55, 1641011460],
    [55, 1641011520],
    [55, 1641011580],
    [55, 1641011640],
    [55, 1641011700],
    [55, 1641011760],
    [55, 1641011820],
    [55, 1641011880],
    [55, 1641011940],
    [55, 1641012000],
    [55, 1641012060],
    [55, 1641012120],
    [55, 1641012180],
    [55, 1641012240],
    [55, 1641012300],
    [55, 1641012360],
    [55, 1641012420],
    [55, 1641012480],
    [55, 1641012540],
    [55, 1641012600],
    [55, 1641012660],
    [55, 1641012720],
    [55, 1641012780],
    [55, 1641012840],
    [55, 1641012900],
    [55, 1641012960],
    [55, 1641013020],
    [55, 1641013080],
    [55, 1641013140],
]

// Data of 7 days with 1 day interval
const FAKE_WEEK_DATA = [
    [33, 1640995200],
    [34, 1641081600],
    [41, 1641168000],
    [38, 1641254400],
    [45, 1641340800],
    [62, 1641427200],
    [42, 1641513600],
]
// Data of 30 days with 1 day interval
const FAKE_MONTH_DATA = [
    [22, 1640995200],
    [11, 1641081600],
    [33, 1641168000],
    [45, 1641254400],
    [22, 1641340800],
    [35, 1641427200],
    [64, 1641513600],
    [23, 1641600000],
    [54, 1641686400],
    [44, 1641772800],
    [63, 1641859200],
    [78, 1641945600],
    [13, 1642032000],
    [28, 1642118400],
    [29, 1642204800],
    [55, 1642291200],
    [66, 1642377600],
    [44, 1642464000],
    [43, 1642550400],
    [48, 1642636800],
    [41, 1642723200],
    [38, 1642809600],
    [39, 1642896000],
    [31, 1642982400],
    [28, 1643068800],
    [58, 1643155200],
    [60, 1643241600],
    [65, 1643328000],
    [62, 1643414400],
    [58, 1643500800],
]

// Data of 1 year with 1 month interval.
const FAKE_YEAR_DATA = [
    [33, 1640995200],
    [34, 1643673600],
    [41, 1646092800],
    [38, 1648771200],
    [45, 1651363200],
    [62, 1654041600],
    [42, 1656633600],
    [32, 1659312000],
    [66, 1661990400],
    [37, 1664582400],
    [24, 1667260800],
    [78, 1669852800],
]

/**
 * Success day test metrics.
 */
export var TEST_SUCCESS_DAY_METRICS: SnakeCasedPropertiesDeep<IMetrics> = [
    {
        target: 'nrlink_consumption_metrics',
        datapoints: FAKE_DAY_DATA,
        nrlink_consent: true,
        enedis_consent: true,
    },
]

/**
 * Sucess week test metrics.
 */
export var TEST_SUCCESS_WEEK_METRICS: SnakeCasedPropertiesDeep<IMetrics> = [
    {
        target: 'nrlink_consumption_metrics',
        datapoints: FAKE_WEEK_DATA,
        nrlink_consent: true,
        enedis_consent: true,
    },
]

/**
 * Sucess month test metrics.
 */
export var TEST_SUCCESS_MONTH_METRICS: SnakeCasedPropertiesDeep<IMetrics> = [
    {
        target: 'nrlink_consumption_metrics',
        datapoints: FAKE_MONTH_DATA,
        nrlink_consent: true,
        enedis_consent: true,
    },
]

/**
 * Success year test metrics.
 */
export var TEST_SUCCESS_YEAR_METRICS: SnakeCasedPropertiesDeep<IMetrics> = [
    {
        target: 'nrlink_consumption_metrics',
        datapoints: FAKE_YEAR_DATA,
        nrlink_consent: true,
        enedis_consent: true,
    },
]

// eslint-disable-next-line jsdoc/require-jsdoc
export const metricsEndpoints = [
    // Get meters metrics
    rest.post<getMetricType>(`${METRICS_API}`, (req, res, ctx) => {
        /*
         * When req.body checks RANGE, it throws an error of 404 because the range is dynamic date.
         */
        if (req.body.interval === FAKE_DAY_INTERVAL && req.body.range) {
            return res(ctx.status(200), ctx.delay(1000), ctx.json(TEST_SUCCESS_DAY_METRICS))
        }
        if (req.body.interval === FAKE_WEEK_INTERVAL && req.body.range) {
            return res(ctx.status(200), ctx.delay(1000), ctx.json(TEST_SUCCESS_WEEK_METRICS))
        }

        if (req.body.interval === FAKE_MONTH_INTERVAL && req.body.range)
            return res(ctx.status(200), ctx.delay(1000), ctx.json(TEST_SUCCESS_MONTH_METRICS))

        if (req.body.interval === FAKE_YEAR_INTERVAL && req.body.range)
            return res(ctx.status(200), ctx.delay(1000), ctx.json(TEST_SUCCESS_YEAR_METRICS))

        return res(ctx.status(401), ctx.json(1000), ctx.json({ error: 'Error' }))
    }),
]
